import axios from "axios";
import mongoose from "mongoose";
import dotenv from "dotenv";
import User from "../models/User.js";
import Novel from "../models/Novel.js";
import Bookmark from "../models/Bookmark.js";

dotenv.config();

const BASE_URL = "http://localhost:5000/api/bookmarks";
const AUTH_URL = "http://localhost:5000/api/auth";

const randomEmail = (prefix) => `${prefix}_${Date.now()}@example.com`;

const testBookmarkAll = async () => {
  await mongoose.connect(process.env.MONGO_URI);
  console.log("‚úÖ MongoDB connected for bookmark test");

  let accessToken, userId, testNovelId;

  try {
    // --- Setup: Create test user and novel ---
    const email = randomEmail("bookmarkuser");
    const userPayload = {
      username: "bookmarktestuser",
      email,
      password: "123456",
    };

    // Register user
    const registerRes = await axios.post(`${AUTH_URL}/register`, userPayload);
    console.log("‚úÖ Test user registered successfully");
    accessToken = registerRes.data.accessToken;

    // Get userId from database instead of JWT
    const testUser = await User.findOne({ email });
    userId = testUser._id;
    console.log("‚úÖ Test user ID from database:", userId);

    // Login to get fresh token
    const loginRes = await axios.post(`${AUTH_URL}/login`, {
      email,
      password: "123456",
    });
    accessToken = loginRes.data.accessToken;
    console.log("‚úÖ Test user logged in");

    // Create test novel with correct schema
    const testNovel = new Novel({
      title: "Test Novel for Bookmark",
      author: userId,
      poster: userId,
      type: "s√°ng t√°c",
      description: "Test description",
      genres: ["Test"],
      status: "c√≤n ti·∫øp",
      coverImageUrl: "test.jpg"
    });
    await testNovel.save();
    testNovelId = testNovel._id;
    console.log("‚úÖ Test novel created:", testNovelId);

    // --- 1Ô∏è‚É£ Test Add Bookmark ---
    console.log("\n--- Test Add Bookmark ---");
    try {
      const res = await axios.post(`${BASE_URL}/${testNovelId}`, {}, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
      console.log("‚úÖ Add bookmark th√†nh c√¥ng:", res.data.message);
    } catch (err) {
      console.log("‚ùå Add bookmark l·ªói:", err.response?.data || err.message);
    }

    // Test add bookmark for non-existent novel
    try {
      await axios.post(`${BASE_URL}/507f1f77bcf86cd799439011`, {}, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
    } catch (err) {
      console.log("‚úÖ L·ªói nh∆∞ mong ƒë·ª£i (novel kh√¥ng t·ªìn t·∫°i):", err.response?.data.message);
    }

    // Test add duplicate bookmark
    try {
      await axios.post(`${BASE_URL}/${testNovelId}`, {}, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
    } catch (err) {
      console.log("‚úÖ L·ªói nh∆∞ mong ƒë·ª£i (duplicate bookmark):", err.response?.data.message);
    }

    // --- 2Ô∏è‚É£ Test Get User Bookmarks ---
    console.log("\n--- Test Get User Bookmarks ---");
    try {
      const res = await axios.get(`${BASE_URL}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
      console.log("‚úÖ Get bookmarks th√†nh c√¥ng:", res.data.bookmarks.length, "bookmarks");
      console.log("üìä Pagination info:", res.data.pagination);
    } catch (err) {
      console.log("‚ùå Get bookmarks l·ªói:", err.response?.data || err.message);
    }

    // Test with pagination
    try {
      const res = await axios.get(`${BASE_URL}?page=1&limit=5`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
      console.log("‚úÖ Get bookmarks with pagination th√†nh c√¥ng:", res.data.bookmarks.length, "bookmarks");
    } catch (err) {
      console.log("‚ùå Get bookmarks with pagination l·ªói:", err.response?.data || err.message);
    }

    // --- 3Ô∏è‚É£ Test Remove Bookmark ---
    console.log("\n--- Test Remove Bookmark ---");
    try {
      const res = await axios.delete(`${BASE_URL}/${testNovelId}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
      console.log("‚úÖ Remove bookmark th√†nh c√¥ng:", res.data.message);
    } catch (err) {
      console.log("‚ùå Remove bookmark l·ªói:", err.response?.data || err.message);
    }

    // Test remove non-existent bookmark
    try {
      await axios.delete(`${BASE_URL}/${testNovelId}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
    } catch (err) {
      console.log("‚úÖ L·ªói nh∆∞ mong ƒë·ª£i (bookmark kh√¥ng t·ªìn t·∫°i):", err.response?.data.message);
    }

    // --- 4Ô∏è‚É£ Test Get Bookmarks After Removal ---
    console.log("\n--- Test Get Bookmarks After Removal ---");
    try {
      const res = await axios.get(`${BASE_URL}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
      console.log("‚úÖ Get bookmarks after removal th√†nh c√¥ng:", res.data.bookmarks.length, "bookmarks");
    } catch (err) {
      console.log("‚ùå Get bookmarks after removal l·ªói:", err.response?.data || err.message);
    }

    // --- 5Ô∏è‚É£ Test Without Authentication ---
    console.log("\n--- Test Without Authentication ---");
    try {
      await axios.post(`${BASE_URL}/${testNovelId}`, {});
    } catch (err) {
      console.log("‚úÖ L·ªói nh∆∞ mong ƒë·ª£i (no auth):", err.response?.status);
    }

    try {
      await axios.get(`${BASE_URL}`);
    } catch (err) {
      console.log("‚úÖ L·ªói nh∆∞ mong ƒë·ª£i (no auth):", err.response?.status);
    }

    try {
      await axios.delete(`${BASE_URL}/${testNovelId}`);
    } catch (err) {
      console.log("‚úÖ L·ªói nh∆∞ mong ƒë·ª£i (no auth):", err.response?.status);
    }

    console.log("\nüéâ T·∫•t c·∫£ test bookmark ho√†n th√†nh!");

  } catch (error) {
    console.error("‚ùå Test error:", error.message);
  } finally {
    // --- Cleanup ---
    await Bookmark.deleteMany({ user: userId });
    await Novel.findByIdAndDelete(testNovelId);
    await User.findByIdAndDelete(userId);
    console.log("‚úÖ Cleanup completed");

    await mongoose.disconnect();
    console.log("‚úÖ MongoDB disconnected, bookmark test ho√†n t·∫•t");
  }
};

testBookmarkAll();
